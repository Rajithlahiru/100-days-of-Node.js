# Node Package Manager

* npm is node package manager and npx is node package execute.
* npm is used to manage the packages and npx is used to execute the packages.

### Installing packages 

* To install locally, `npm install <package_name>`
* To install globaly, `npm install -g <package_name>`

--save-dev ===> save to develeopment dependencies
--no-save ===> will not added to the package.json
--save-optional ===> save to optional dependencies
--no-optional ===> prevents optional dependencies being dwonloaded

## Running Tasks

```json
{
  "scripts": {
    "watch": "webpack --watch --progress --colors --config webpack.conf.js",
    "dev": "webpack --progress --colors --config webpack.conf.js",
    "prod": "NODE_ENV=production webpack -p --config webpack.conf.js"
  }
}
```

### Publishing a package

1. `npm adduser` or `npm login` and follow the instructions.
2. Create a directory and a `package.json` in it. (cd into the package)
3. Insert the following into the package.json
```json
	{
		"name": "@<username>/<package name>,
		"version": "1.1.0"
	}
```
4. Publish the package using the command `npm publish --access=public`

### NPM Package Updating

* To check for outdated packages`npm outdated`
* `npm update` will not update the major version. 
* `npm install <module>@latest` will install the latest version.

* `npm i -g npm-check-updates` --> Better update approach imo.
* `ncu` --> To see the updates available
* `ncu --upgrade` to update or `ncu --interactive` to enter the interactive mode.

### NPM Scripts

* Inside the package.json,

```json
{
  "scripts": {
    "echo": "echo hello!"
  }
}
```
> npm run echo  --> will give "echo hello!" output  

* `npm run <script_name>`
* Another example
```json
{
	"scripts": {
		"chkupdates":"npm --outdated",
		"deps": "npm list --depth=0"
	}
}
```
> npm run chkupdates  
> npm run deps















































